events {
  worker_connections 1024;
}

http {
  error_log /var/log/nginx/error.log debug;
  access_log /var/log/nginx/access.log;

  # Define an upstream for the Flask app for cleaner proxying
  upstream flask_app {
    server flask_app:5000;
  }

  # Your excellent "catch-all" block to drop unknown traffic
  server {
    listen 80 default_server;
    listen 443 ssl default_server;
    server_name _;
    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    return 444; # Close connection
  }

  # Your HTTP to HTTPS redirect block (Perfect)
  server {
    listen 80;
    server_name ctf.cyberpanther-dev.space;
    return 301 https://$host$request_uri;
  }

  # Your main HTTPS server block (Now with optimization)
  server {
    listen 443 ssl;
    server_name ctf.cyberpanther-dev.space;

    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
        
        # --- OPTIMIZATION ---
        # Serve static files directly from the mounted volume
    location /assets/ {
      alias /app/assets/;
      expires 30d; # Cache static files in browser
      add_header Cache-Control "public";
    }

    # Pass all other requests to the Flask app
    location / {
      proxy_pass http://flask_app; # Use the upstream
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }
}